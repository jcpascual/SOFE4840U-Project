@page "/call/{callId}"
@model CallModel
@{
    ViewData["Title"] = "Call";
}

<h2>Call</h2>

<div class="container">
    <ul class="nav nav-tabs" id="myTab" role="tablist">
        <li class="nav-item" role="presentation">
            <button class="nav-link active" id="text-tab" data-bs-toggle="tab" data-bs-target="#text" type="button" role="tab" aria-controls="text" aria-selected="true">Text</button>
        </li>
        <li class="nav-item" role="presentation">
            <button class="nav-link" id="av-tab" data-bs-toggle="tab" data-bs-target="#av" type="button" role="tab" aria-controls="av" aria-selected="false">Video</button>
        </li>
    </ul>
    <div class="tab-content" id="myTabContent">
        <div class="tab-pane fade show active" id="text" role="tabpanel" aria-labelledby="text-tab">
            <div class="row p-1">
                <div class="col-1">User</div>
                <div class="col-5"><input type="text" id="userInput" /></div>
            </div>
            <div class="row p-1">
                <div class="col-1">Message</div>
                <div class="col-5"><input type="text" class="w-100" id="messageInput" /></div>
            </div>
            <div class="row p-1">
                <div class="col-6 text-end">
                    <input type="button" id="sendButton" value="Send Message" />
                </div>
            </div>
            <div class="row p-1">
                <div class="col-6">
                    <hr />
                </div>
            </div>
            <div class="row p-1">
                <div class="col-6">
                    <ul id="messagesList"></ul>
                </div>
            </div>
        </div>
        <div class="tab-pane fade" id="av" role="tabpanel" aria-labelledby="av-tab">
            <div class="row p-1">
                <div class="col-6">
                    <input type="button" id="videoButton" value="Start Video" />
                </div>
            </div>
            <video id="remoteVideo" class="w-100" playsinline></video>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/simple-peer/simplepeer.min.js"></script>
    <script src="~/js/call-chrome-shim.js"></script>

    <script>
        const worker = new Worker("../js/call-worker.js");
        const callId = "@Model.CallId";

        const connection = new signalR.HubConnectionBuilder().withUrl("/hubs/call?callId=" + callId).build();
        
        var localStream;
        var p;
        
        connection.on("StartSimplePeerConnection", function (initiatorId) {
            p = new window.SimplePeer({
                initiator: connection.connectionId === initiatorId,
                trickle: false,
                config: {
                    iceServers: [
                        {
                            urls: [
                                'stun:stun.l.google.com:19302',
                                'stun:global.stun.twilio.com:3478'
                            ]
                        }
                    ],
                    sdpSemantics: 'unified-plan',
                    encodedInsertableStreams: true
                }
            });
            
            p.on('error', err => console.log('error', err));
            
            p.on('signal', data => {
                const json = JSON.stringify(data);
                
                console.log('SP-SIGNAL', json);
                
                connection.invoke("SendSimplePeerSignal", json).catch(function (err) {
                    return console.error(err.toString());
                });
            });
            
            p.on('connect', () => {
                document.getElementById("sendButton").disabled = false;
                
                document.getElementById("sendButton").addEventListener("click", function (event) {
                    const user = document.getElementById("userInput").value;
                    const message = document.getElementById("messageInput").value;
                    
                    p.send(user + ' says ' + message);
                    
                    event.preventDefault();
                });
                
                document.getElementById("videoButton").addEventListener("click", function (event) {
                    navigator.mediaDevices.getUserMedia({
                        audio: false,
                        video: true,
                    }).then(function (stream) {
                        p.addStream(stream);
                        
                        for (const track of stream.getTracks()) {
                            let submap = p._senderMap.get(track);
                            let sender = submap.get(stream);
                            sender.transform = new RTCRtpScriptTransform(worker, {side: "send"});
                        }
                    }).catch(function (err) {
                        console.error(err);
                    });
                    event.preventDefault();
                });
            });
            
            p.on('data', (data) => {
                var li = document.createElement("li");
                document.getElementById("messagesList").appendChild(li);
                // We can assign user-supplied strings to an element's textContent because it
                // is not interpreted as markup. If you're assigning in any other way, you 
                // should be aware of possible script injection concerns.
                li.textContent = data;
            });
            
            p.on('stream', stream => {
                const video = document.querySelector('#remoteVideo');
                video.srcObject = stream;
                
                for (const receiver of p._pc.getReceivers()) {
                    receiver.transform = new RTCRtpScriptTransform(worker, {side: "receive"});
                }
                
                video.play();
                
            })
            
            p.on('error', (error) => {
                console.error(error.message);
                
                connection.stop();
            });
        });
        
        connection.on("ReceiveSimplePeerSignal", function (data) {
            p.signal(JSON.parse(data));
        });
        
        connection.on("PeerDisconnected", function (data) {
            p.destroy();
        });

        connection.start().catch(function (err) {
            return console.error(err);
        });
    </script>
}