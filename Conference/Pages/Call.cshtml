@page "/call/{callId}"
@model CallModel
@{
    ViewData["Title"] = "Call";
    ViewData["UseStandardLayout"] = false;
    ViewData["BodyClasses"] = "vh-100 m-0 overflow-hidden";
}

<div class="row gx-0 h-100">
    <div class="col-12 col-md-7 col-lg-9 h-100">
        <video id="remoteVideo" class="w-100 h-100 bg-secondary" playsinline></video>
    </div>
    <div class="col d-flex flex-column">
        <div class="m-1 h-75" id="chatArea"></div>
        <div class="flex-grow-1 m-1">
            <textarea class="w-100 h-100" id="textarea"></textarea>
        </div>
        <div class="m-2 gx-1">
            <a href="#" type="button" class="btn btn-primary" id="start-video-button">Start Video</a>
            <a href="#" type="button" class="btn btn-danger" id="hang-up-button">Hang Up</a>
        </div>
    </div>
</div>

<div id="password-modal" class="modal" tabindex="-1">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">End-to-End Encrypted Call</h5>
            </div>
            <div class="modal-body">
                  <label for="password-field" class="form-label">Password</label>
                  <input type="password" class="form-control" id="password-field">
            </div>
            <div class="modal-footer">
                <a href="#" type="button" class="btn btn-primary" id="password-ok-button">OK</a>
            </div>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/lib/signalr/dist/browser/signalr.min.js"></script>
    <script src="~/lib/simple-peer/simplepeer.min.js"></script>
    <script src="~/js/call-chrome-shim.js"></script>

    <script>
        const worker = new Worker("../js/call-worker.js");
        const callId = "@Model.Call.Id";
        const username = "@HttpContext.User!.Identity!.Name";

        const connection = new signalR.HubConnectionBuilder().withUrl("/hubs/call?callId=" + callId).build();
        
        var localStream;
        var p;
        
        connection.on("StartSimplePeerConnection", function (initiatorId) {
            p = new window.SimplePeer({
                initiator: connection.connectionId === initiatorId,
                trickle: false,
                config: {
                    iceServers: [
                        {
                            urls: [
                                'stun:stun.l.google.com:19302',
                                'stun:global.stun.twilio.com:3478'
                            ]
                        }
                    ],
                    sdpSemantics: 'unified-plan',
                    encodedInsertableStreams: true
                }
            });
            
            p.on('error', err => console.log('error', err));
            
            p.on('signal', data => {
                const json = JSON.stringify(data);
                
                console.log('SP-SIGNAL', json);
                
                connection.invoke("SendSimplePeerSignal", json).catch(function (err) {
                    return console.error(err.toString());
                });
            });
            
            p.on('connect', () => {
                $("#textarea").keyup(function (e) {
                    var code = e.keyCode ? e.keyCode : e.which;
                    if (code == 13) {
                        let text = $(this).val();
                        text = text.substring(0, text.length - 1);
                        
                        const data = {
                            username: username,
                            message: text
                        };
                        
                        p.send(JSON.stringify(data));
                        
                        $(this).val("");
                        
                        appendChatData(data);
                    }
                });
                
                $("#start-video-button").click(function (e) {
                    navigator.mediaDevices.getUserMedia({
                        audio: false,
                        video: true,
                    }).then(function (stream) {
                        p.addStream(stream);
                        
                        for (const track of stream.getTracks()) {
                            let sender = p._senderMap.get(track).get(stream);
                            sender.transform = new RTCRtpScriptTransform(worker, {
                                side: "send",
                                name: "encryptTransform"
                            });
                        }
                    }).catch(function (err) {
                        console.error(err);
                    });
                });
                
                $("#hang-up-button").click(function (e) {
                    window.location.href = "/";
                });
            });
            
            p.on('data', (data) => {
                const dataIn = JSON.parse(data);
                
                appendChatData(dataIn);
            });
            
            p.on('stream', stream => {
                const video = document.querySelector('#remoteVideo');
                video.srcObject = stream;
                
                for (const receiver of p._pc.getReceivers()) {
                    receiver.transform = new RTCRtpScriptTransform(worker, {
                        side: "receive",
                        name: "decryptTransform"
                    });
                }
                
                video.play();
                
            })
            
            p.on('error', (error) => {
                console.error(error.message);
                
                connection.stop();
            });
        });
        
        connection.on("ReceiveSimplePeerSignal", function (data) {
            p.signal(JSON.parse(data));
        });
        
        connection.on("PeerDisconnected", function (data) {
            p.destroy();
        });
        
        async function deriveKey(password) {
            const encoder = new TextEncoder();
        
            const keyMaterial = await crypto.subtle.importKey(
                "raw",
                encoder.encode(password),
                "PBKDF2",
                false,
                ["deriveBits", "deriveKey"],
            );
        
            const salt = await crypto.subtle.digest("SHA-256", encoder.encode(callId));
        
            return crypto.subtle.deriveKey(
                {
                    name: "PBKDF2",
                    hash: "SHA-256",
                    salt: salt,
                    iterations: 100000,
                },
                keyMaterial,
                {
                    name: "AES-GCM", length: 256
                },
                true,
                ["encrypt", "decrypt"],
            );
        }
        
        function connectSignalR(password) {
            deriveKey(password).then(function (key) {
                worker.postMessage({
                    callkey: key
                });
            });
            
            connection.start().catch(function (err) {
                return console.error(err);
            });
        }
        
        function appendChatData(data) {
            $("#chatArea").append("<p><strong>" + data.username + ": </strong>" + data.message + "</p>");
        }
    </script>

    @if (Model.Call.GetHasPassword())
    {
        <script>
            $(document).ready(function() {
                const hash = $(location).attr("hash");
                
                if (hash.startsWith("#pw-")) {
                    const passwordEncoded = hash.substring(4);
                    const password = atob(passwordEncoded);
                    
                    connectSignalR(password);
                } else {
                    $("#password-modal").modal({backdrop: 'static', keyboard: false});
                    $("#password-modal").modal('show');
                    
                    $("#password-ok-button").click(function () {
                        $("#password-modal").modal('hide');
                        
                        const password = $("#password-field").val();
                        
                        connectSignalR(password);
                    });
                }
            });
        </script>
    }
    else
    {
        <script>
            $(document).ready(function() {
                connectSignalR("SOFE4840U");
            });
        </script>
    }
}